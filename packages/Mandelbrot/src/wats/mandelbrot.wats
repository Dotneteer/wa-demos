const uint WIDTH = 1200;
const uint HEIGHT = 800;
const uint MAX_ITERS = 512;
const uint FRAC_BITS = 28;
const i64 fp4 = i64(4.0 * (1 << FRAC_BITS));

u8[WIDTH * HEIGHT * 4] image;
uint[MAX_ITERS + 1] colorTable;

// Implements the Mandelbrot calculation
export void mandelbrot(double cx, double cy, double diameter) {
  local int x;
  local int y = 0;
  local double verticalDiameter = diameter * HEIGHT / WIDTH;
  local double initialRx = cx + diameter * -WIDTH / WIDTH;
  local double rx = initialRx;
  local double ry = cy + verticalDiameter * double(1 - HEIGHT) / HEIGHT;
  local double stepX = diameter / WIDTH;
  local double stepY = verticalDiameter / HEIGHT;
  local *uint ptr = &image;
  while (y < HEIGHT) {
    x = 0;
    rx = initialRx;
    while (x < WIDTH) {
        local int iterations = iterateEquation(rx, ry);
        *ptr = colorTable[iterations];
        rx += stepX;
        x += 1;
        ptr += 1;
    }
    ry += stepY;
    y += 1;    
  }
}

int iterateEquation(double x0, double y0) {
  local i64 a;
  local i64 b;
  local i64 rx;
  local i64 ry;
  local i64 x0fp = toFixPoint(x0);
  local i64 y0fp = toFixPoint(y0);
  local int iterations;
  while ((iterations < MAX_ITERS) & (fixPointMultiply(rx, rx) + fixPointMultiply(ry, ry) <= fp4)) {
    rx = fixPointMultiply(a, a) - fixPointMultiply(b, b) + x0fp;
    ry = fixPointMultiply(a, b) * 2 + y0fp;
    a = rx;
    b = ry;
    iterations += 1;
  }
  return iterations;
}

export void initColors() {
  local int counter = 0;
  while (counter < MAX_ITERS) {
    colorTable[counter] = 0xff000000
     | (color(counter, 356) << 16)
     | (color(counter, 128) << 8)
     | color(counter, 0);
    counter += 1;
  }
  colorTable[MAX_ITERS] = 0xff000000;
}

u8 color(int iteration, int offset) {
  iteration = ((iteration * 4) + offset) % 1024;
  if (iteration < 256) {
    return iteration;
  }
  if (iteration < 512) {
    return 511 - iteration;
  }
  return 0;
}

inline i64 toFixPoint(double value) {
  return i64(value * (1 << FRAC_BITS));
}

inline i64 fixPointMultiply(i64 a, i64 b) {
  return (a * b) >> FRAC_BITS;
}